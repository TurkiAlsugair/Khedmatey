// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  SERVICE_PROVIDER
  WORKER
  ADMIN
}

model Customer {
  id Int @default(autoincrement()) @id

  username String 

  phoneNumber String @unique

  role Role @default(value: CUSTOMER)

  Request Request[]
}

model ServiceProvider{
  id Int @default(autoincrement()) @id

  username String

  phoneNumber String @unique

  email String @unique

  role Role @default(value: SERVICE_PROVIDER)

  workers Worker[]

  cities City[]

  services Service[]

  status  Status  @default(PENDING)

  //schedule of the service provider
  ProviderDay ProviderDay[]
}

enum CityName {
  Riyadh
  Jeddah
  Dammam
}

model City {
  id Int @id @default(autoincrement())

  name CityName @unique //unique is used so that findUnique function of prisma client can be used

  providers ServiceProvider[]

  workers   Worker[] //workers that work in this city
}

enum CategoryName {
  Cleaning
  Plumbing
  Electrical
  Painting
  Other
}


model Category {
  id       Int       @id @default(autoincrement())
  name     CategoryName    @unique
  services Service[]
}

model Service {
  id Int @id @default(autoincrement())

  nameAR String 
  nameEN String
  
  categoryId       Int
  category         Category         @relation(fields: [categoryId], references: [id])

  price String

  requiredNbOfWorkers   Int @default(1)

  status  Status  @default(PENDING)

  serviceProvider ServiceProvider @relation(fields: [serviceProviderId], references: [id])
  serviceProviderId Int

  Request Request[]

  ProviderDayService ProviderDayService[]
}

model Worker {
  id Int @id @default(autoincrement())
  
  username String       
  
  phoneNumber String @unique

  role Role @default(value: WORKER)

  serviceProvider  ServiceProvider  @relation(fields: [serviceProviderId], references: [id])
  serviceProviderId Int

  //city the worker works in
  city        City    @relation(fields: [cityId], references: [id])
  cityId      Int    

  //schedule of the worker, which links to the requests the worker worked on 
  ProviderDayWorker ProviderDayWorker[]
}


model Request {
  id Int @id @default(autoincrement())

  customerId      Int
  customer        Customer         @relation(fields: [customerId], references: [id])

  serviceId       Int
  service         Service          @relation(fields: [serviceId], references: [id])

  locationId  Int
  location    Location @relation(fields: [locationId], references: [id])

  notes           String?

  status  Status  @default(PENDING)

  //the day the request was scheduled on
  providerDayId   Int
  providerDay     ProviderDay      @relation(fields: [providerDayId], references: [id])

  //the entity of the schedule of the worker
  dailyWorkers    ProviderDayWorker[] @relation("DailyWorkerOnRequest")
}

model Location {
  id           Int     @id @default(autoincrement())
  city         String
  fullAddress  String  @unique
  miniAddress  String
  lat          Float
  lng          Float

  requests     Request[] 
}

enum Status {
  PENDING
  ACCEPTED
  DECLINED
}

model Admin {
  id          Int     @id @default(autoincrement())
  username    String
  phoneNumber String @unique
  role        Role    @default(value: ADMIN)
}


//SCHEDULING MODELS 

//A day of a provider, all other scheduling models link back to this model 
model ProviderDay {
  id                   Int                     @id @default(autoincrement())
  date                 DateTime
  isClosed             Boolean                 @default(false) //closed manually
  isBusy               Boolean                 @default(false) //closed by not enouph workers
  totalRequestsCount   Int                     @default(0)

  //link to provider
  serviceProviderId    Int
  serviceProvider      ServiceProvider         @relation(fields: [serviceProviderId], references: [id])

  //workers on this day
  providerDayWorkers   ProviderDayWorker[]

  //services made on this day
  providerDayServices  ProviderDayService[]

  //requests scheduled on this day
  requests Request[]

  //compound unique constraint to ensure date + serviceProviderId is unique such that no there is no duplicate days
  @@unique([date, serviceProviderId])
}

//For each service on a day
model ProviderDayService {
  id              Int    @id @default(autoincrement())
  isClosed        Boolean @default(false)

  //link to original day
  providerDayId   Int
  providerDay     ProviderDay @relation(fields: [providerDayId], references: [id])

  //the specific service
  serviceId       Int         
  service         Service     @relation(fields: [serviceId], references: [id])

  //compound unique constraint to ensure date + servuce is unique such that no there is no duplicate days for the same service
  @@unique([serviceId, providerDayId]) 
}

model ProviderDayWorker {
  id               Int    @id @default(autoincrement())
  nbOfAssignedRequests Int    @default(0)
  capacity         Int    @default(2)

  //link to original day
  providerDayId    Int
  providerDay      ProviderDay @relation(fields: [providerDayId], references: [id])

  //link to the worker
  workerId         Int
  worker           Worker       @relation(fields: [workerId], references: [id])

  //requests the worker works on at this day
  requests Request[] @relation("DailyWorkerOnRequest")

  //compound unique constraint to ensure date + worker is unique such that no there is no duplicate days for the worker
  @@unique([workerId, providerDayId]) 
}

